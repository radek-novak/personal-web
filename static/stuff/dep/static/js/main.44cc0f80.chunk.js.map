{"version":3,"sources":["lib/dep.ts","state.ts","Graph.tsx","Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["subtract","setA","setB","forEach","n","delete","dep","depList","depList_","cloneDeep","res","toRemove","Set","round","roundChanged","size","entries","Array","from","_i","_entries","length","_ref11","_ref8","Object","slicedToArray","key","has","add","_i2","_entries2","_ref12","set","isValid","newdep","newDepList","get","Boolean","initialState","Map","parallel","reducer","state","arguments","undefined","action","newState","type","payload","_action$payload$dep","a","b","Node","_ref","x","y","text","react_default","createElement","Fragment","fill","width","height","rx","CELL_HEIGHT","CELL_WIDTH","getCoords","i","j","Graph","props","_stabilize","p","d","map","_Array$from","_ref4","_ref3","deps","stabilize","Math","max","apply","toConsumableArray","row","className","el","to","findPos","concat","x1","y1","x2","y2","Graph_Node","assign","Table","newfield","React","useRef","_React$useReducer","useReducer","_React$useReducer2","dispatch","style","margin","field","fieldSet","display","textAlign","String","padStart","defaultValue","_ref5","fieldLoc","onChange","disabled","checked","form","id","onSubmit","e","preventDefault","current","value","autoFocus","ref","src_Graph","App","src_Table","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44cc0f80.chunk.js","sourcesContent":["import { cloneDeep } from \"lodash\";\n\ntype DepList<T> = Map<T, Set<T>>;\ntype DepDef<T> = [T, T];\n\nexport const buildDepList = <T>(deps: DepDef<T>[]): DepList<T> => {\n  const nums = new Map() as DepList<T>;\n  for (let [a, b] of deps) {\n    nums.set(a, new Set());\n    nums.set(b, new Set());\n  }\n  for (let [a, b] of deps) {\n    nums.get(a)!.add(b);\n  }\n\n  return nums;\n};\n\nconst subtract = <T>(setA: Set<T>, setB: Set<T>) =>\n  setB.forEach(n => setA.delete(n));\n\nexport default function dep<T>(depList: DepList<T>): Set<T>[] | null {\n  const depList_ = cloneDeep(depList);\n  const res = [] as Set<T>[];\n  const toRemove = new Set<T>();\n  let round = 0;\n  let roundChanged = false;\n  while (depList_.size) {\n    const entries = Array.from(depList_.entries());\n    res[round] = new Set();\n\n    for (let [key, set] of entries) {\n      if (set.size === 0 && !toRemove.has(key)) {\n        res[round].add(key);\n        toRemove.add(key);\n        depList_.delete(key);\n        roundChanged = true;\n      }\n    }\n\n    for (let [, set] of entries) {\n      subtract(set, toRemove);\n    }\n\n    if (!roundChanged) {\n      return null;\n    }\n\n    roundChanged = false;\n\n    round++;\n  }\n\n  return res;\n}\n\nexport function isValid<T>(depList: DepList<T>, newdep: [T, T]): boolean {\n  const newDepList = cloneDeep(depList);\n  newDepList.get(newdep[0])!.add(newdep[1]);\n  return Boolean(dep(newDepList));\n}\n","import dep from \"./lib/dep\";\nimport { cloneDeep } from \"lodash\";\n\nexport const TOGGLE_DEP = \"TOGGLE_DEP\";\nexport const RM_DEP = \"RM_DEP\";\nexport const ADD_FIELD = \"ADD_FIELD\";\nexport const RM_FIELD = \"RM_FIELD\";\n\ntype DepType = string;\n\ntype Action =\n  | {\n      type: typeof TOGGLE_DEP | typeof RM_DEP;\n      payload: { dep: [DepType, DepType] };\n    }\n  | {\n      type: typeof ADD_FIELD | typeof RM_FIELD;\n      payload: DepType;\n    };\n\nconst initialState = {\n  depList: new Map<DepType, Set<DepType>>(),\n  parallel: [] as Set<DepType>[] | null\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  const newState = cloneDeep(state);\n\n  switch (action.type) {\n    case ADD_FIELD:\n      newState.depList.set(action.payload, new Set());\n      break;\n    case TOGGLE_DEP:\n      const [a, b] = action.payload.dep;\n\n      if (newState.depList.get(a) !== undefined) {\n        if (newState.depList.get(a)!.has(b)) {\n          newState.depList.get(a)!.delete(b);\n        } else {\n          newState.depList.get(a)!.add(b);\n        }\n      }\n      break;\n  }\n\n  newState.parallel = dep(newState.depList);\n\n  return newState;\n};\n\nexport { reducer, initialState };\n","import React from \"react\";\n\ntype Props = {\n  depList: Map<string, Set<string>>;\n  parallel: Set<string>[];\n};\n\nconst CELL_WIDTH = 20;\nconst CELL_HEIGHT = 20;\nconst BOX_Y_OFFSET = -(3 * CELL_HEIGHT) / 4;\n\ntype NodeProps = { x: number; y: number; text: string };\nconst Node: React.FC<NodeProps> = ({ x, y, text }: NodeProps) => {\n  return (\n    <>\n      <rect\n        fill=\"white\"\n        x={x}\n        width={CELL_WIDTH}\n        y={y + BOX_Y_OFFSET}\n        height={CELL_HEIGHT}\n        rx={CELL_HEIGHT / 4}\n      />\n      <text x={x + CELL_WIDTH / 4} y={y}>\n        {text}\n      </text>\n    </>\n  );\n};\n\nconst getCoords = (i: number, j: number): { x: number; y: number } => {\n  return {\n    x: j * CELL_WIDTH * 2 + CELL_WIDTH / 2,\n    y: (i + 1) * CELL_HEIGHT * 2 - CELL_HEIGHT / 2\n  };\n};\n\nconst stabilize = (p: Set<string>[], d: Map<string, Set<string>>) => {\n  const parallel = p.map(set => Array.from(set));\n  const depList: { [key: string]: string[] } = {};\n  for (let [key, deps] of Array.from(d.entries())) {\n    depList[key] = Array.from(deps);\n  }\n  return { parallel, depList };\n};\n\nconst Graph: React.FC<Props> = (props: Props) => {\n  if (!props.parallel || !props.parallel.length) return null;\n\n  // make elements indexable\n  const { parallel, depList } = stabilize(props.parallel, props.depList);\n\n  const width = Math.max(...parallel.map(row => row.length)) * CELL_WIDTH * 2;\n  const height = parallel.length * CELL_HEIGHT * 2;\n\n  const findPos = (el: string): [number, number] => {\n    for (let i = 0; i < parallel.length; i++)\n      for (let j = 0; j < parallel[i].length; j++) {\n        if (parallel[i][j] === el) return [i, j];\n      }\n\n    return [0, 0];\n  };\n\n  return (\n    <svg className=\"graph\" width={width} height={height}>\n      {parallel.map((row, i) =>\n        row.map((el, j) =>\n          depList[el].map(dep => {\n            const to = getCoords(...findPos(dep));\n            const from = getCoords(i, j);\n            return (\n              <line\n                key={`${i}-${j}-${to.x}-${to.y}`}\n                x1={from.x + CELL_WIDTH / 2}\n                y1={from.y - CELL_HEIGHT / 2}\n                x2={to.x + CELL_WIDTH / 2}\n                y2={to.y - CELL_HEIGHT / 2}\n              />\n            );\n          })\n        )\n      )}\n      {parallel.map((row, i) => (\n        <g key={i}>\n          {row.map((el, j) => (\n            <Node key={el} text={el} {...getCoords(i, j)} />\n          ))}\n        </g>\n      ))}\n    </svg>\n  );\n};\n\nexport default Graph;\n","import React from \"react\";\nimport { initialState, reducer, ADD_FIELD, TOGGLE_DEP } from \"./state\";\nimport { isValid } from \"./lib/dep\";\nimport Graph from \"./Graph\";\n\nconst Table: React.FC = () => {\n  const newfield = React.useRef<HTMLInputElement | null>(null);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const onSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (newfield.current && newfield.current.value) {\n      dispatch({ type: ADD_FIELD, payload: newfield.current.value });\n      newfield.current.value = \"\";\n    }\n  };\n\n  const entries = Array.from(state.depList.entries());\n\n  return (\n    <div>\n      <table style={{ margin: \"auto\" }}>\n        <thead>\n          <tr>\n            <td />\n            <td className=\"label\">↓ depends on →</td>\n            {entries.map(([field]) => (\n              <td key={field}>{field}</td>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {entries.map(([field, fieldSet], i) => (\n            <tr key={field + i}>\n              <td>\n                <pre\n                  style={{\n                    display: \"inline-block\",\n                    margin: 0,\n                    width: \"3rem\",\n                    textAlign: \"right\"\n                  }}\n                >\n                  {String(i).padStart(1)}\n                </pre>\n              </td>\n              <td>\n                <input type=\"text\" defaultValue={field} />\n              </td>\n              {entries.map(([fieldLoc]) => {\n                return (\n                  <td key={field + fieldLoc}>\n                    <input\n                      className=\"dependency-checkbox\"\n                      type=\"checkbox\"\n                      onChange={() => {\n                        const dep: [string, string] = [field, fieldLoc];\n                        dispatch({ type: TOGGLE_DEP, payload: { dep } });\n                      }}\n                      disabled={!isValid(state.depList, [field, fieldLoc])}\n                      checked={fieldSet.has(fieldLoc)}\n                    />\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n          <tr>\n            <td>\n              <button form=\"newfieldform\" type=\"submit\">\n                add\n              </button>\n            </td>\n            <td>\n              <form id=\"newfieldform\" onSubmit={onSubmit}>\n                <input autoFocus ref={newfield} type=\"text\" />\n              </form>\n            </td>\n            <td />\n          </tr>\n        </tbody>\n      </table>\n      {state.parallel ? (\n        <Graph parallel={state.parallel} depList={state.depList} />\n      ) : (\n        <b>There's a cycle in the graph</b>\n      )}\n    </div>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"./Table\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}